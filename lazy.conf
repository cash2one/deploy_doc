* supervisor进程管理神器

supervisord.conf {

    [unix_http_server]
    file=/tmp/supervisor.sock   ; UNIX socket 文件，supervisorctl 会使用
    ;chmod=0700                 ; socket 文件的 mode，默认是 0700
    ;chown=nobody:nogroup       ; socket 文件的 owner，格式： uid:gid

    ;[inet_http_server]         ; HTTP 服务器，提供 web 管理界面
    ;port=127.0.0.1:9001        ; Web 管理后台运行的 IP 和端口，如果开放到公网，需要注意安全性
    ;username=user              ; 登录管理后台的用户名
    ;password=123               ; 登录管理后台的密码

    [supervisord]
    logfile=/tmp/supervisord.log ; 日志文件，默认是 $CWD/supervisord.log
    logfile_maxbytes=50MB        ; 日志文件大小，超出会 rotate，默认 50MB
    logfile_backups=10           ; 日志文件保留备份数量默认 10
    loglevel=info                ; 日志级别，默认 info，其它: debug,warn,trace
    pidfile=/tmp/supervisord.pid ; pid 文件
    nodaemon=false               ; 是否在前台启动，默认是 false，即以 daemon 的方式启动
    minfds=1024                  ; 可以打开的文件描述符的最小值，默认 1024
    minprocs=200                 ; 可以打开的进程数的最小值，默认 200

    ; the below section must remain in the config file for RPC
    ; (supervisorctl/web interface) to work, additional interfaces may be
    ; added by defining them in separate rpcinterface: sections
    [rpcinterface:supervisor]
    supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

    [supervisorctl]
    serverurl=unix:///tmp/supervisor.sock ; 通过 UNIX socket 连接 supervisord，路径与 unix_http_server 部分的 file 一致
    ;serverurl=http://127.0.0.1:9001 ; 通过 HTTP 的方式连接 supervisord

    ; 包含其他的配置文件
    [include]
    files = relative/directory/*.conf    ; 可以是 *.conf 或 *.ini
}

supervisor.conf {

    [program:usercenter]
    directory = /home/qiu/projects/usercenter ; 程序的启动目录
    command = uwsgi --ini /home/qiu/project/my_uwsgi.ini  ; 启动命令，可以看出与手动在命令行启动的命令是一样的
    autostart = true     ; 在 supervisord 启动的时候也自动启动
    startsecs = 5        ; 启动 5 秒后没有异常退出，就当作已经正常启动了
    autorestart = true   ; 程序异常退出后自动重启
    startretries = 3     ; 启动失败自动重试次数，默认是 3
    user = leon          ; 用哪个用户启动
    redirect_stderr = true  ; 把 stderr 重定向到 stdout，默认 false
    stdout_logfile_maxbytes = 20MB  ; stdout 日志文件大小，默认 50MB
    stdout_logfile_backups = 20     ; stdout 日志文件备份数
    ; stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）
    stdout_logfile = /data/logs/usercenter_stdout.log

    ; 可以通过 environment 来添加需要的环境变量，一种常见的用法是修改 PYTHONPATH
    ; environment=PYTHONPATH=$PYTHONPATH:/path/to/somewhere
}

* nignx服务器

nignx配置

nginx.conf {

user www-data;
worker_processes 4;　
pid /run/nginx.pid;

events {
	worker_connections 768; # 一个woker的最大连接数
	use epoll;
	# multi_accept on;
}

http {

	##
	# Basic Settings
	##

	sendfile on;
	tcp_nopush on;
	tcp_nodelay on;

	keepalive_timeout 300s;   # 前后两次请求的超时间隔
	keepalive_requests 2147483647;　# 一个连接最多请求次数

	types_hash_max_size 2048;
	# server_tokens off;

	# server_names_hash_bucket_size 64;
	# server_name_in_redirect off;

	include /etc/nginx/mime.types;
	default_type application/octet-stream;

	##
	# Logging Settings
	##

	access_log /var/log/nginx/access.log;
	error_log /var/log/nginx/error.log;

	##
	# Gzip Settings
	##

	gzip on;
	gzip_disable "msie6";

	# gzip_vary on;
	# gzip_proxied any;
	# gzip_comp_level 6;
	# gzip_buffers 16 8k;
	# gzip_http_version 1.1;
	# gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

	##
	# nginx-naxsi config
	##
	# Uncomment it if you installed nginx-naxsi
	##

	#include /etc/nginx/naxsi_core.rules;

	##
	# nginx-passenger config
	##
	# Uncomment it if you installed nginx-passenger
	##

	#passenger_root /usr;
	#passenger_ruby /usr/bin/ruby;

	##
	# Virtual Host Configs
	##

	include /etc/nginx/conf.d/*.conf;
	include /etc/nginx/sites-enabled/*;
}


#mail {
#	# See sample authentication script at:
#	# http://wiki.nginx.org/ImapAuthenticateWithApachePhpScript
#
#	# auth_http localhost/auth.php;
#	# pop3_capabilities "TOP" "USER";
#	# imap_capabilities "IMAP4rev1" "UIDPLUS";
#
#	server {
#		listen     localhost:110;
#		protocol   pop3;
#		proxy      on;
#	}
#
#	server {
#		listen     localhost:143;
#		protocol   imap;
#		proxy      on;
#	}
#}


}

nginx 代理服务器配置

upload_server_nginx.conf {

# the upstream component nginx needs to connect to
upstream django {
    server unix:///home/qiu/DataServerEnv/DataServer/data_server.sock; # for a file socket
    #server 127.0.0.1:8001; # for a web port socket (we'll use this first)
    keepalive 10; # 上游服务器最大承载连接数
}

# configuration of the server
server {
    # the port your site will be served on
    listen      9000;
    # the domain name it will serve for
    server_name 127.0.0.1; # substitute your machine's IP address or FQDN
    charset     utf-8;

    # max upload size
    client_max_body_size 75M;   # adjust to taste

    # log
    access_log /var/log/nginx/data_access.log;
        error_log /var/log/nginx/data_error.log;

    # Django data
    location /data  {
        alias /home/qiu/DataServerEnv/DataServer/data;  # your Django project's media files - amend as required
    }

    location /static {
        alias /home/qiu/DataServerEnv/DataServer/static; # your Django project's static files - amend as required
    }

    # Finally, send all non-media requests to the Django server.
    location / {
        uwsgi_pass  django; # 使用uwsgi协议
        include     /home/qiu/DataServerEnv/DataServer/uwsgi_params; # the uwsgi_params file you installed
    }
}

}


django uwsgi服务器配置

uwsgi.ini {

# upload_server_uwsgi.ini file
[uwsgi]
plugins = python

# Django-related settings
# the base directory (full path)
chdir           = /home/qiu/DataServerEnv/DataServer/
# Django's wsgi file
module          = DataServer.wsgi
# the virtualenv (full path)
home            = /home/qiu/DataServerEnv/env/
# process-related settings
# master
master          = true
# maximum number of worker processes
processes       = 1
# the socket (use the full path to be safe
socket          = /home/qiu/DataServerEnv/DataServer/data_server.sock
# ... with appropriate permissions - may be needed
chmod-socket    =  666
# clear environment on exit
vacuum          = true
gid = www-data
uid = www-data

}

uwsgi params 参数

uwsgi_params {

uwsgi_param	QUERY_STRING		$query_string;
uwsgi_param	REQUEST_METHOD		$request_method;
uwsgi_param	CONTENT_TYPE		$content_type;
uwsgi_param	CONTENT_LENGTH		$content_length;

uwsgi_param	REQUEST_URI		$request_uri;
uwsgi_param	PATH_INFO		$document_uri;
uwsgi_param	DOCUMENT_ROOT		$document_root;
uwsgi_param	SERVER_PROTOCOL		$server_protocol;
uwsgi_param	UWSGI_SCHEME		$scheme;

uwsgi_param	REMOTE_ADDR		$remote_addr;
uwsgi_param	REMOTE_PORT		$remote_port;
uwsgi_param	SERVER_PORT		$server_port;
uwsgi_param	SERVER_NAME		$server_name;

}

* django logging日志配置

>> import logging
>> logging.getLogger("DataServerApp.views")

LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'formatters': {
        'standard': {
            'format': '%(asctime)s [%(threadName)s:%(thread)d] [%(name)s:%(lineno)d] [%(module)s:%(funcName)s] '
                      '[%(levelname)s]- %(message)s'
        }
    },
    'filters': {
    },
    'handlers': {
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
            'include_html': True,
        },
        'default': {
            'level':'DEBUG',
            'class':'logging.handlers.RotatingFileHandler',
            'filename': 'DataServerApp/log/default.log',
            'maxBytes': 1024*1024*5,
            'backupCount': 5,
            'formatter':'standard',
        },
        'error': {
            'level':'ERROR',
            'class':'logging.handlers.RotatingFileHandler',
            'filename': 'DataServerApp/log/error.log',
            'maxBytes': 1024*1024*5,
            'backupCount': 5,
            'formatter': 'standard',
        },
        'console':{
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'standard'
        },
        'request_handler': {
            'level':'DEBUG',
            'class':'logging.handlers.RotatingFileHandler',
            'filename': 'DataServerApp/log/script.log',
            'maxBytes': 1024*1024*5,
            'backupCount': 5,
            'formatter':'standard',
        },
        'scprits_handler': {
            'level':'DEBUG',
            'class':'logging.handlers.RotatingFileHandler',
            'filename':'DataServerApp/log/script.log',
            'maxBytes': 1024*1024*5,
            'backupCount': 5,
            'formatter':'standard',
        }
    },
    'loggers': {
        'django': {
            'handlers': ['default', 'console'],
            'level': 'DEBUG',
            'propagate': False
        },
        'django.request': {
            'handlers': ['request_handler'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'scripts': {
            'handlers': ['scprits_handler'],
            'level': 'INFO',
            'propagate': False
        },
        'DataServerApp.views': {
            'handlers': ['default', 'error', "console"],
            'level': 'DEBUG',
            'propagate': True
        },
    }
}

* python 发送附件邮件

def send_log(file_name, email_list):
    """
        file_name 目标文件
        email_list 接受邮件列表
    """
    From = "xxx"
    Password = "xxx"
    Smtp = "smtp.126.com"

    server = smtplib.SMTP(Smtp)
    server.login(From, Password)

    main_msg = MIMEMultipart()
    contype = 'application/octet-stream'
    maintype, subtype = contype.split('/', 1)

    if not os.path.isfile(file_name):
        logging.debug("%s file not exist"% (file_name))
        return
    data = open(file_name, 'rb')
    file_msg = MIMEBase(maintype, subtype)
    file_msg.set_payload(data.read())
    data.close()
    encode_base64(file_msg)

    basename = os.path.basename(file_name)
    file_msg.add_header('Content-Disposition',
                        'attachment', filename=basename)
    main_msg.attach(file_msg)
    main_msg['From'] = From
    main_msg['Subject'] = file_name.split("/")[-1]
    main_msg['Date'] = formatdate()
    main_msg['To'] = ",".join(email_list)

    try:
        server.sendmail(From, email_list, main_msg.as_string())
        logging.debug("send log to %d user succeed" %(len(email_list.split(","))))
        print("succeed")
    except Exception as e:
        logging.debug(e)
    finally:
        server.quit()


